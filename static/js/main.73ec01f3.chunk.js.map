{"version":3,"sources":["Todo-Input-handle.js","Todo-Item-handle.js","Todo-List-View.js","App.js","serviceWorker.js","index.js"],"names":["TodoInputHandle","this","props","activity","handleInputChange","handleInputSubmit","editActivity","className","onSubmit","type","placeholder","value","onChange","disabled","Component","TodoItemHandle","title","handleActivityDelete","handleActivityEdit","checkTask","CompletedTaskCheck","style","textDecoration","onClick","TodoListView","activities","handleActivitiesClear","map","key","id","App","event","setState","target","checkedTask","state","find","task","newCheckedTaskArray","filter","preventDefault","updatedActivities","uuidV4","filterActivity","filterEditActivity","selectedItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.73ec01f3.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass TodoInputHandle extends Component {\r\n    render() {\r\n        //destructuring\r\n        const {activity,handleInputChange,handleInputSubmit,editActivity}=this.props;\r\n        return (\r\n            <div className=\"card card-body my-3\">\r\n                {/*form start*/}\r\n                <form onSubmit={handleInputSubmit}>\r\n                    <div className=\"input-group \">\r\n                        <div className=\"input-group-prepend\">\r\n                            <div className=\"input-group-text bg-primary text-white\">\r\n                                <i className=\"fas fa-book\"></i>  {/*Input field side icon*/}\r\n                            </div>\r\n                        </div>\r\n                        {/*input field*/}\r\n                        <input type=\"text\" className=\"form-control text-capitalize \" placeholder=\"add todo Activities\"\r\n                        value={activity} onChange={handleInputChange}/>\r\n                    </div>\r\n\r\n                    {/*Submit button*/}\r\n                    {/*1.check empty task then display submit button*/}\r\n                    {/*2.check edit activity true then display button name edit and change color*/}\r\n                    <button disabled={activity ? false :true}\r\n                            type=\"submit\"\r\n                            className={editActivity ? \"btn btn-block btn-success mt-3\" : \"btn btn-block btn-primary mt-3\"}>\r\n                        {editActivity ? \"Edit Task \": \"Submit\"}</button>\r\n\r\n                </form>\r\n                {/*form end*/}\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoInputHandle;","import React, {Component} from 'react';\r\n\r\nclass TodoItemHandle extends Component {\r\n    render() {\r\n        //destructuring\r\n        const {title,handleActivityDelete,handleActivityEdit,checkTask,CompletedTaskCheck}=this.props;\r\n        //show complete task with cut line\r\n        const cutLine = {\r\n            textDecoration: 'line-through'\r\n        }\r\n        return (\r\n            <div className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\r\n                {/* check cut line css executing */}\r\n                <h6 style={checkTask ? cutLine :null}>{title}</h6>\r\n            <div className=\"todo-icon\">\r\n                <span className=\"mx-2 text-success\" onClick={handleActivityEdit}><i className=\"fas fa-pen\"/></span> {/* icon  edit*/}\r\n                <span className=\"mx-2 text-danger\" onClick={handleActivityDelete}><i className=\"fas fa-trash\"/></span>{/* icon  delete*/}\r\n                <span className=\"mx-2 text-primary\" onClick={CompletedTaskCheck}><i className=\"fas fa-book\" /></span> {/* icon  Complete task*/}\r\n\r\n            </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItemHandle;","import React, {Component} from 'react';\r\nimport TodoItemHandle from './Todo-Item-handle';\r\n\r\nclass TodoListView extends Component {\r\n    render() {\r\n        //destructuring\r\n        const {activities,handleActivitiesClear,handleActivityDelete,handleActivityEdit,CompletedTaskCheck}=this.props\r\n        return (\r\n           <div className=\"list-group my-5\">\r\n               <h3 className=\"text-center text-white \"> Task Manager </h3>\r\n               {/* manipulating array  */}\r\n               {activities.map( activity=>{\r\n                   return (\r\n                       <TodoItemHandle key={activity.id}\r\n                                       title={activity.title}\r\n                                       handleActivityDelete={()=>handleActivityDelete(activity.id)}\r\n                                       handleActivityEdit={()=>handleActivityEdit(activity.id)}\r\n                                       CompletedTaskCheck={()=>CompletedTaskCheck(activity.id)}\r\n                                       checkTask={activity.checkTask}\r\n                       >\r\n                       </TodoItemHandle>)})}\r\n               {/*clear button to delete all*/}\r\n                       <button type=\"button\" className=\"btn btn-danger btn-block text-uppercase mt-5\" onClick={handleActivitiesClear}>Clear List</button>\r\n\r\n           </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListView;","import React, {Component} from 'react';\nimport { v4 as uuidV4 } from 'uuid';\nimport  './App.css'\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport TodoInputHandle from \"./Todo-Input-handle\";\nimport TodoListView from \"./Todo-List-View\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n       this.state={\n            activities:[],\n            id : uuidV4(), //Generate random unique id\n            activity:'',    // Test string\n           editActivity:false, //Edit activity check variable\n           checkTask:false // Complete task check variable\n        };\n    }\n\n    // handling the input field taking value\n  handleInputChange=(event)=>{\n       this.setState({\n           activity:event.target.value\n       });\n    }\n\n    // Complete task and handling the array\n  CompletedTaskCheck =(id)=>{\n      const checkedTask = this.state.activities.find(task => task.id === id);\n      checkedTask.checkTask = true;\n\n      const newCheckedTaskArray = this.state.activities.filter(task => task.id !== id);\n      this.setState({\n          activities: [...newCheckedTaskArray, checkedTask]\n          //add to complete task text should go down\n      });\n  }\n\n  //handle the submit event and handling the input field as new one\n  handleInputSubmit=(event)=>{\n        event.preventDefault();\n        const newActivity={\n            id:this.state.id,\n            title:this.state.activity\n        }\n      //create the list appear on the first list elements\n      const updatedActivities=[newActivity,...this.state.activities,]\n      this.setState({\n          activities:updatedActivities,\n          activity:'',\n          id:uuidV4(),\n          editActivity:false,\n          checkTask:false\n      });\n\n    }\n\n    // delete all tasks\n  handleActivitiesClear=(event)=>{\n        this.setState({activities:[]})\n    }\n\n    //delete unique list\n  handleActivityDelete=(id)=>{\n        const filterActivity=this.state.activities.filter(event => event.id !== id);\n        this.setState({\n            activities:filterActivity\n        });\n    }\n\n    // edit unique task and updating\n  handleActivityEdit=(id)=>{\n      const filterEditActivity=this.state.activities.filter(event => event.id !== id);\n      const selectedItem=this.state.activities.find(event=> event.id === id);\n      this.setState({\n          activities:filterEditActivity,\n          activity:selectedItem.title,\n          id:id,\n          editActivity:true,\n\n\n      });\n  }\n\n    render() {\n\n    return (\n        <div className=\"container\" id=\"app1\">\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <h3 className=\"text-center text-white\">TODO LIST</h3>\n                    {/* pass the child to use these function  */}\n                    <TodoInputHandle activity={this.state.activity}\n                                     handleInputChange={this.handleInputChange}\n                                     handleInputSubmit={this.handleInputSubmit}\n                                     editActivity={this.state.editActivity}\n                    />\n                </div>\n\n                <div className=\"col-md-6\" id=\"ex1\">\n                    {/* pass the child to use these function  */}\n                    <TodoListView activities={this.state.activities}\n                                  handleActivitiesClear={this.handleActivitiesClear}\n                                  handleActivityDelete={this.handleActivityDelete}\n                                  handleActivityEdit={this.handleActivityEdit}\n                                  CompletedTaskCheck={this.CompletedTaskCheck}\n                    />\n                </div>\n                </div>\n            </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}